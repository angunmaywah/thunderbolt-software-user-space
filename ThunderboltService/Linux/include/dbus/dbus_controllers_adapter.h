
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx___home_eas_intel_dev2_bld_daemon_debug_dbus_controllers_adapter_h__ADAPTOR_MARSHAL_H
#define __dbusxx___home_eas_intel_dev2_bld_daemon_debug_dbus_controllers_adapter_h__ADAPTOR_MARSHAL_H

#include "tbtdbus.h"
#include <cassert>

namespace com {
namespace Intel {
namespace Thunderbolt1 {

class controllers_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    controllers_adaptor()
    : ::DBus::InterfaceAdaptor("com.Intel.Thunderbolt1.controllers")
    {
        register_method(controllers_adaptor, GetControllerList, _GetControllerList_stub);
    }

    // The introspection API changed from DBus-C++ library version 0.5 to 
    // version 0.9.  In particular, the introspect() virtual function signature
    // changed from returning IntrospectedInterface* to returning 
    // IntrospectedInterface* const.
    //
    // This final 'const' is spurious.  It is ignored by most, but not all,
    // parts of the C++ compiler.  Unfortunately, while it is stripped by
    // decltype(), it is not ignored in the virtual function matching system.
    // Thus we cannot use a trick with decltype() here to get the proper
    // type to get the virtual function machinery to do the right thing.
    //
    // All we are left with is the preprocessor.  We rely on the 'make' system
    // to decide whether to include the spurious const in the return type
    // here.
#if DBUS_CXX_INTROSPECT_HAS_SPURIOUS_CONST
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wignored-qualifiers"
#endif

    ::DBus::IntrospectedInterface*
#ifdef DBUS_CXX_INTROSPECT_HAS_SPURIOUS_CONST
    const
#endif
    introspect() const
    {
        static ::DBus::IntrospectedArgument GetControllerList_args[] = 
        {
            { "retval", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod controllers_adaptor_methods[] = 
        {
            { "GetControllerList", GetControllerList_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod controllers_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty controllers_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface controllers_adaptor_interface = 
        {
            "com.Intel.Thunderbolt1.controllers",
            controllers_adaptor_methods,
            controllers_adaptor_signals,
            controllers_adaptor_properties
        };
        return &controllers_adaptor_interface;
    }
#if DBUS_CXX_INTROSPECT_HAS_SPURIOUS_CONST
#pragma GCC diagnostic pop
#endif

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< std::string > GetControllerList() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _GetControllerList_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = GetControllerList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } } 
#endif //__dbusxx___home_eas_intel_dev2_bld_daemon_debug_dbus_controllers_adapter_h__ADAPTOR_MARSHAL_H
